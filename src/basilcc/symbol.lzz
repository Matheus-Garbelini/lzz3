namespace basilcc
{
  // base class
  class Symbol
  {
  public:
    virtual ~ Symbol ()
    {}

    // get number
    inline int getNumber () const
    {
      return m_num;
    }

    // get name
    inline Ident getName () const
    {
      return m_name;
    }
    
    // true if token
    virtual bool isToken () const = 0;

    // get first
    inline First & getFirst ()
    {
      return m_first;
    }

  protected:
    Symbol (int num, Ident name)
      : m_num (num), m_name (name)
    {}

  private:
    int m_num;
    Ident m_name;
    First m_first;
  }

  class Token : public Symbol
  {
  public:
    inline Token (int num, Ident name)
      : Symbol (num, name)
    {}
    ~ Token ()
    {}

    // true if token
    bool isToken () const
    {
      return true;
    }
  }

  class NonTerminal : public Symbol
  {
  public:
    inline NonTerminal (int num, Ident name)
      : Symbol (num, name), m_go2 (0)
    {}
    ~ NonTerminal ()
    {
      delete m_go2;
    }

    // true if token
    bool isToken () const
    {
      return false;
    }

    // set goto
    void setGoto (GotoPtr go2)
    {
      m_go2 = go2;
    }

    // get goto
    inline GotoPtr getGoto () const
    {
      return m_go2;
    }

  private:
    // owns go2
    GotoPtr m_go2;
  }

  // a < b
  bool operator < (Symbol const & a, Symbol const & b)
  {
    // tokens first, otherwise order by number
    bool a_is_token = a.isToken (), b_is_token = b.isToken ();
    return (a_is_token && ! b_is_token) || (a_is_token == b_is_token && a.getNumber () < b.getNumber ());
  }
  inline bool symbolLess (Symbol const * a, Symbol const * b)
  {
    return * a < * b;
  }

  // to capitalized string, for get child method in node
  std::string symbolToCapString (SymbolPtr symbol)
  {
    string str;
    char const * name = symbol->getName ();
    if (symbol->isToken ())
    {
      // replace '-' with '_'
      char ch;
      for (int i = 0; (ch = name [i]) != 0; ++ i)
      {
        if (ch == '-')
        {
          ch = '_';
        }
        str += ch;
      }
    }
    else
    {
      str = toCapString (name);
    }
    return str;
  }
}

using namespace std;

#hdr
#include <basilcc/first.h>
#include <basilcc/goto_ptr.h>
#include <util/ident.h>
#include <string>
#end

#src
#include <basilcc/goto.h>
#include <basilcc/util.h>
#end
