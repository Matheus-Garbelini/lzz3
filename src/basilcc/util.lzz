namespace basilcc
{
  // delete object and set pointer to 0
  template <class PTR>
  inline void deleteObject (PTR & p)
  {
    delete p;
    p = 0;
  }
  // functor
  template <class PTR>
  inline void DeleteObject (; PTR & p)
  {
    deleteObject (p);
  }

  // delete container of objects
  template <class ITER>
  inline void deleteObjects (ITER beg, ITER end)
  {
    std::for_each (beg, end, DeleteObject <typename ITER::value_type> ());
  }
  // delete container of objects
  template <class PTR>
  inline void deleteObjects (PTR * beg, PTR * end)
  {
    std::for_each (beg, end, DeleteObject <PTR> ());
  }

  // return name as cap string
  std::string toCapString (char const * name)
  {
    string str;
    // remove '-' and '_' and capitalize words
    char ch;
    bool cap = true;
    for (size_t i = 0; (ch = name [i]) != 0; ++ i)
    {
      if (ch == '-' || ch == '_')
      {
        cap = true;
      }
      else 
      {
        if (cap)
        {
          ch = toupper (name [i]);
          cap = false;
        }
        str += ch; 
      }
    }
    return str;
  }
}

using namespace std;

#hdr
#include <algorithm>
#include <string>
#end
