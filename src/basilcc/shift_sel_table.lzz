namespace basilcc
{
  class ShiftSelTable : public Table
  {
  public:
    ShiftSelTable ()
    {}
    ~ ShiftSelTable ()
    {
      deleteObjects (m_shift_sels.begin (), m_shift_sels.end ());
    }

    // get shift sel
    ShiftSelPtr getShiftSel (ShiftPtrVector & shifts)
    {
      for_each (shifts.begin (), shifts.end (), PlugShift (m_shift_sel_trie));
      ShiftSelPtr & shift_sel = m_shift_sel_trie.commit (0);
      if (! shift_sel)
      {
        shift_sel = new ShiftSel (m_shift_sels.size (), shifts);
        m_shift_sels.push_back (shift_sel);
      }
      return shift_sel;
    }

    // get all shift sels
    inline ShiftSelPtrVector const & getShiftSels () const
    {
      return m_shift_sels;
    }

    enum { TABLE = TABLE_SHIFT_SEL }
  private:
    ShiftSelPtrTrie m_shift_sel_trie;
    ShiftSelPtrVector m_shift_sels;
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  inline void PlugShift (ShiftSelPtrTrie & trie; ShiftPtr shift) const
  {
    trie.plug (unsigned (shift));
  }
}

#hdr
#include <basilcc/table.h>
#include <basilcc/shift_ptr_vector.h>
#include <basilcc/shift_sel_ptr_trie.h>
#include <basilcc/shift_sel_ptr_vector.h>
#end

#src
#include <basilcc/util.h>
#include <basilcc/shift_sel.h>
#include <algorithm>
#end
