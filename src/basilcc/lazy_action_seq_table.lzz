namespace basilcc
{
  class LazyActionSeqTable : public Table
  {
  public:
    LazyActionSeqTable ()
    {}
    ~ LazyActionSeqTable ()
    {
      deleteObjects (m_lazy_action_seqs.begin (), m_lazy_action_seqs.end ());
    }

    // get lazy action seq from actions, actions will be stolen if new action seq
    LazyActionSeqPtr getLazyActionSeq (LazyActionPtrVector & lazy_actions)
    {
      for_each (lazy_actions.begin (), lazy_actions.end (), PlugLazyAction (m_lazy_action_seq_trie));
      LazyActionSeqPtr & lazy_action_seq = m_lazy_action_seq_trie.commit (0);
      if (! lazy_action_seq)
      {
        lazy_action_seq = new LazyActionSeq (lazy_actions);
        m_lazy_action_seqs.push_back (lazy_action_seq);
      }
      return lazy_action_seq;
    }

    enum { TABLE = TABLE_LAZY_ACTION_SEQ }
  private:
    LazyActionSeqPtrTrie m_lazy_action_seq_trie;
    LazyActionSeqPtrVector m_lazy_action_seqs;
  }
}

using namespace basilcc;

namespace 
{
  // plug action in trie
  inline void PlugLazyAction (LazyActionSeqPtrTrie & trie; LazyActionPtr lazy_action) const
  {
    trie.plug (unsigned (lazy_action));
  }
}

#hdr
#include <basilcc/lazy_action_ptr_vector.h>
#include <basilcc/lazy_action_seq_ptr_trie.h>
#include <basilcc/lazy_action_seq_ptr_vector.h>
#include <basilcc/table.h>
#include <basilcc/table_number.h>
#end

#src
#include <basilcc/lazy_action_seq.h>
#include <basilcc/util.h>
#end
