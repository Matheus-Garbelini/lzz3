namespace basilcc
{
  class Priority;

  class ShiftRuleTable : public Table
  {
  public:
    ShiftRuleTable ()
    {}
    ~ ShiftRuleTable ()
    {
      deleteObjects (m_shift_rules.begin (), m_shift_rules.end ());
    }
    
    // freeze shift rule, reuse shift_rule or delete it
    ShiftRulePtr freeze (ShiftRulePtr & shift_rule)
    {
      m_shift_rules_trie.plug (unsigned (shift_rule->getBaseRule ()));
      Priority const & sp = shift_rule->getShiftPriority ();
      m_shift_rules_trie.plug (sp.getCount ());
      m_shift_rules_trie.plug (sp.getBang ());
      ShiftRulePtr & shared_shift_rule = m_shift_rules_trie.commit (shift_rule);
      if (shared_shift_rule == shift_rule)
      {
        m_shift_rules.push_back (shared_shift_rule);
      }
      else
      {
        deleteObject (shift_rule);
      }
      return shared_shift_rule;
    }
    
    // get shared rule from base rule and shift priority
    ShiftRulePtr getRule (BaseRulePtr base_rule, Priority const & sp)
    {
      m_shift_rules_trie.plug (unsigned (base_rule));
      m_shift_rules_trie.plug (sp.getCount ());
      m_shift_rules_trie.plug (sp.getBang ());
      ShiftRulePtr & shift_rule = m_shift_rules_trie.commit (0);
      if (! shift_rule)
      {
        shift_rule = * m_shift_rules.insert (m_shift_rules.end (), new ShiftRule (base_rule, sp));
      }
      return shift_rule;
    }

    enum { TABLE = TABLE_SHIFT_RULE }
  private:
    ShiftRulePtrTrie m_shift_rules_trie;
    ShiftRulePtrVector m_shift_rules;
  }
}

#hdr
#include <basilcc/base_rule_ptr.h>
#include <basilcc/shift_rule_ptr_trie.h>
#include <basilcc/shift_rule_ptr_vector.h>
#include <basilcc/table.h>
#end

#src
#include <basilcc/base_rule_table.h>
#include <basilcc/priority.h>
#include <basilcc/shift_rule.h>
#include <basilcc/util.h>
#end
