namespace basilcc
{
  class CC;

  // add new rule to grammar
  void addRule (CC & cc, RuleNamePtr rule_name, RuleSymbolPtr left_rule_symbol, RuleSymbolPtrVector const & right_rule_symbols,
      RuleSymbolPtrVector const & explicit_follow, bool no_bypass)
  {
    bool is_start = left_rule_symbol->getSymbol () == cc.getStartSymbol ();
    getTable <RuleTable> (cc).addRule (rule_name, is_start, left_rule_symbol, right_rule_symbols, explicit_follow, no_bypass);
  }

  // get rules that have left hand symbol
  RulePtrVector const & getRules (CC & cc, SymbolPtr left_symbol)
  {
    return getTable <RuleTable> (cc).getRules (left_symbol);
  }

  // get start rules
  RulePtrVector const & getStartRules (CC & cc)
  {
    return getTable <RuleTable> (cc).getRules (cc.getStartSymbol ());
  }

  // get all rules
  RulePtrVector const & getRules (CC & cc)
  {
    return getTable <RuleTable> (cc).getRules ();
  }

  // true if symbol is a left hand symbol in some rule
  bool isLeftHandSymbol (CC & cc, SymbolPtr symbol)
  {
    return getTable <RuleTable> (cc).isLeftHandSymbol (symbol);
  }

  // true if node exists
  bool hasNode (CC & cc, Ident name)
  {
    return getTable <RuleTable> (cc).hasNode (name);
  }

  // get node, must exist
  NodePtr getNode (CC const & cc, Ident name)
  {
    return getTable <RuleTable> (cc).getNode (name);
  }

  // get all nodes
  NodePtrVector const & getNodes (CC const & cc)
  {
    return getTable <RuleTable> (cc).getNodes ();
  }
}

#hdr
#include <basilcc/node_ptr_vector.h>
#include <basilcc/rule_name_ptr.h>
#include <basilcc/rule_ptr_vector.h>
#include <basilcc/rule_symbol_ptr_vector.h>
#include <basilcc/symbol_ptr.h>
#include <util/ident.h>
#end

#src
#include <basilcc/cc.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/rule_table.h>
#end
