namespace basilcc
{
  class CC;

  // closure on all states, return number of conflicts
  int closure (CC & cc)
  {
    // create start states
    createStartStates (cc);
    cout << "computing states" << endl;
    StatePtrVector const & states = getStates (cc);
    int num_conflicts = 0;
    for (int i = 0; i < int (states.size ()); ++ i)
    {
      if (i % 40 == 0)
      {
        cout << i << ' ' << states.size () << endl;
      }
      num_conflicts += states [i]->closure (cc);
    }
    cout << states.size () << " states" << endl;
    cout << num_conflicts << " conflicts" << endl;
    return num_conflicts;
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  // create start states
  void createStartStates (CC & cc)
  {
    RulePtrVector const & start_rules = getStartRules (cc);
    for_each (start_rules.begin (), start_rules.end (), CreateStartState (cc));
  }
  // create start state with start rule
  void CreateStartState (CC & cc; RulePtr rule)
  {
    getStartState (cc, rule);
  }

  // create and return start state
  StatePtr getStartState (CC & cc, RulePtr rule)
  {
    BaseRulePtr base_rule = getBaseRule (cc, rule);
    ShiftRulePtr shift_rule = getShiftRule (cc, base_rule, Priority ());
    FollowRulePtrVector follow_rules (1, getFollowRule (cc, shift_rule, getStartFollow (cc, rule)));
    FollowKernelPtr follow_kernel = getFollowKernel (cc, follow_rules);
    return getState (cc, follow_kernel);
  }

  // get follow for start rule
  FollowPtr getStartFollow (CC & cc, RulePtr rule)
  {
    auto_ptr <Follow> follow (new Follow ());
    bool sticky = true, accept = true;
    SymbolPtr shortcut = getStartSymbol (cc);
    bool null = true;
    // only start rules may have explicit follow
    RuleSymbolPtrVector const & explicit_follow = rule->getExplicitFollow ();
    if (! explicit_follow.empty ())
    {
      null = false;
      for (RuleSymbolPtrVectorConstIter i = explicit_follow.begin (); i != explicit_follow.end (); ++ i)
      {
        RuleSymbolPtr rule_symbol = * i;
        SymbolPtr symbol = rule_symbol->getSymbol ();
        First const & first = symbol->getFirst ();
        follow->addFirst (first, rule_symbol->getLexState (), shortcut, rule_symbol->getFirstPriority (), sticky, accept);
        if (first.hasNull ())
        {
          null = true;
        }
      }
    }
    if (null)
    {
      First const & first = getEOTSymbol (cc)->getFirst ();
      follow->addFirst (first, LexState (), shortcut, Priority (), sticky, accept);
    }
    return freezeFollow (cc, follow.release ());
  }
}

#src
#include <basilcc/base_rule_api.h>
#include <basilcc/follow.h>
#include <basilcc/follow_api.h>
#include <basilcc/follow_kernel_api.h>
#include <basilcc/follow_rule_api.h>
#include <basilcc/rule.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/shift_rule_api.h>
#include <basilcc/state.h>
#include <basilcc/state_api.h>
#include <basilcc/symbol.h>
#include <basilcc/symbol_api.h>
#include <algorithm>
#include <iostream>
#include <memory>
#end
