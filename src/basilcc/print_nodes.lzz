namespace basilcc
{
  class CC;

  // print lua nodes  
  void printNodes (CC const & cc, std::string const & filename)
  {
    // binary file
    ofstream os (filename.c_str (), ios_base::out);
    if (! os)
    {
      ThrowException (context) << "failed to open file for writing: " << filename;
    }
    char const * module = "nodes";
    // create the nodes table
    os << "local " << module << " = {}" << '\n';
    os << '\n';
    // define the nodes
    NodePtrVector const & nodes = getNodes (cc);
    for_each (nodes.begin (), nodes.end (), PrintNode (module, os));
    os << "return nodes" << endl;
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  // print node
  void PrintNode (char const * module, ostream & os; NodePtr node) const
  {
    char const * name = node->getName ();
    RulePtr rule = node->getRule ();
    os << "--";
    if (rule)
    {
      os << ' ' << rule->toString ();
    }
    os << '\n';
    os << "local " << name << " = node (\"" << name << "\")" << '\n';
    // get functions if defined (otherwise have to use the bracket operators to get children)
    if (rule)
    {
      RuleSymbolPtrVector const & rule_symbols = rule->getRightRuleSymbols ();
      for_each (rule_symbols.begin (), rule_symbols.end (), PrintGetChild (name, os));
    }
    // accept function
    os << "function " << name << ":accept (visitor)" << '\n';
    os << "   return visitor:on" << name << " (self)" << '\n';
    os << "end" << '\n';
    os << module << '.' << name << " = " << name << '\n'; 
    os << '\n';
  }
  void PrintGetChild (char const * name, ostream & os, int num = 0; RuleSymbolPtr rule_symbol)
  {
    os << "function " << name << ":get" << rule_symbol->getCapString () << " ()" << '\n';
    os << "   return self [" << ++ num << ']' << '\n';
    os << "end" << '\n';
  }

  char const context [] = "basilcc/print_nodes";
}

#hdr
#include <string>
#end

#src
#include <basilcc/node.h>
#include <basilcc/rule.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_symbol.h>
#include <util/throw_exception.h>
#include <algorithm>
#include <fstream>
#end
