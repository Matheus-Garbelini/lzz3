namespace basilcc
{
  class CC;

  // make sure we have at least one start rule and all nonterminals are defined
  void checkRules (CC & cc)
  {
    if (! isLeftHandSymbol (cc, cc.getStartSymbol ()))
    {
      ThrowException () << "no start rules";
    }
    RulePtrVector const & rules = getRules (cc);
    for_each (rules.begin (), rules.end (), CheckRule (cc));
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  // check rule
  void CheckRule (CC & cc; RulePtr const & rule) const
  {
    /* not an error
    // if has rule name make sure node defined 
    RuleNamePtr rule_name = rule->getRuleName ();
    if (rule_name && ! hasNode (cc, rule_name->getCapString ()))
    {
      ThrowException (rule_name->getLoc ()) << "node " << rule_name->getName () << " not defined (did you mean to used '='?)";
    }
    */
    // all right hand symbols must be defined
    RuleSymbolPtrVector const & right_rule_symbols = rule->getRightRuleSymbols ();
    for_each (right_rule_symbols.begin (), right_rule_symbols.end (), CheckNonTerm (cc));
  }
  // make sure right rule symbol, if nonterminal, is defined (is a left hand symbol on some rule)   
  void CheckNonTerm (CC & cc; RuleSymbolPtr rule_symbol) const
  {
    SymbolPtr symbol = rule_symbol->getSymbol ();
    if (! (symbol->isToken () || isLeftHandSymbol (cc, symbol)))
    {
      ThrowException (rule_symbol->getLoc ()) << "no rule with left hand symbol " << symbol->getName () << " defined";
    }
  }
}

#hdr
#end

#src
#include <basilcc/cc.h>
#include <basilcc/rule.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_name.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/symbol.h>
#include <util/throw_exception.h>
#include <algorithm>
#end
