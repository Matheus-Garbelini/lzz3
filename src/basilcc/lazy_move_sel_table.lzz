namespace basilcc
{
  class LazyMoveSelTable : public Table
  {
  public:
    LazyMoveSelTable ()
    {}
    ~ LazyMoveSelTable ()
    {
      deleteObjects (m_lazy_move_sels.begin (), m_lazy_move_sels.end ());
    }

    // get shared lazy move sel from moves
    LazyMoveSelPtr getLazyMoveSel (LazyMovePtrVector const & lazy_moves)
    {
      for_each (lazy_moves.begin (), lazy_moves.end (), PlugLazyMove (m_lazy_move_sel_trie));
      LazyMoveSelPtr & lazy_move_sel = m_lazy_move_sel_trie.commit (0);
      if (! lazy_move_sel)
      {
        lazy_move_sel = * m_lazy_move_sels.insert (m_lazy_move_sels.end (), new LazyMoveSel (m_lazy_move_sels.size (), lazy_moves));
      }
      return lazy_move_sel;
    }

    enum { TABLE = TABLE_LAZY_MOVE_SEL }
  private:
    LazyMoveSelPtrTrie m_lazy_move_sel_trie;
    LazyMoveSelPtrVector m_lazy_move_sels;
  }
}

using namespace basilcc;

namespace
{
  inline void PlugLazyMove (LazyMoveSelPtrTrie & trie; LazyMovePtr lazy_move) const
  {
    trie.plug (unsigned (lazy_move));
  }
}

#hdr
#include <basilcc/lazy_move_ptr_vector.h>
#include <basilcc/lazy_move_sel_ptr_trie.h>
#include <basilcc/lazy_move_sel_ptr_vector.h>
#include <basilcc/table.h>
#end

#src
#include <basilcc/lazy_move_sel.h>
#include <basilcc/util.h>
#end
