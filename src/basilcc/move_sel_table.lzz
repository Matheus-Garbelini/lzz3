namespace basilcc
{
  class MoveSelTable : public Table
  {
  public:
    MoveSelTable ()
    {}
    ~ MoveSelTable ()
    {
      deleteObjects (m_move_sels.begin (), m_move_sels.end ());
    }
    
    // get move sel from moves
    MoveSelPtr getMoveSel (MovePtrVector & moves)
    {
      for_each (moves.begin (), moves.end (), PlugMove (m_move_sel_trie));
      MoveSelPtr & move_sel = m_move_sel_trie.commit (0);
      if (! move_sel)
      {
        move_sel = new MoveSel (m_move_sels.size (), moves);
        m_move_sels.push_back (move_sel);
      }
      return move_sel;
    }

    // get all move sels
    inline MoveSelPtrVector const & getMoveSels () const
    {
      return m_move_sels;
    }

    enum { TABLE = TABLE_MOVE_SEL } 
  private:
    MoveSelPtrTrie m_move_sel_trie;
    MoveSelPtrVector m_move_sels;
  }
}

using namespace std;
using namespace basilcc;

namespace
{
  inline void PlugMove (MoveSelPtrTrie & trie; MovePtr move) const
  {
    trie.plug (unsigned (move));
  }
}

#hdr
#include <basilcc/move_ptr_vector.h>
#include <basilcc/move_sel_ptr_trie.h>
#include <basilcc/move_sel_ptr_vector.h>
#include <basilcc/table.h>
#end

#src
#include <basilcc/move_sel.h>
#include <basilcc/util.h>
#include <algorithm>
#end
