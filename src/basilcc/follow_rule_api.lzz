namespace basilcc
{
  class CC;

  // freeze follow rule, return shared rule, reuse follow_rule or delete it
  FollowRulePtr freezeFollowRule (CC & cc, FollowRulePtr & follow_rule)
  {
    follow_rule->freeze (cc);
    return getTable <FollowRuleTable> (cc).freeze (follow_rule);
  }

  // freeze follow rule functor
  inline FollowRulePtr FreezeFollowRule (CC & cc; FollowRulePtr & follow_rule)
  {
    return freezeFollowRule (cc, follow_rule);
  }

  // get follow rule from components
  FollowRulePtr getFollowRule (CC & cc, ShiftRulePtr shift_rule, FollowPtr follow)
  {
    return getTable <FollowRuleTable> (cc).getFollowRule (shift_rule, follow);
  }

  // advance dot and return shared rule
  FollowRulePtr getNextFollowRule (CC & cc, FollowRulePtr follow_rule)
  {
    return getFollowRule (cc, getNextShiftRule (cc, follow_rule->getShiftRule ()), follow_rule->getFollow ());
  }
}

#hdr
#include <basilcc/follow_ptr.h>
#include <basilcc/follow_rule_ptr.h>
#include <basilcc/shift_rule_ptr.h>
#end

#src
#include <basilcc/cc.h>
#include <basilcc/follow_rule.h>
#include <basilcc/follow_rule_table.h>
#include <basilcc/shift_rule_api.h>
#end
