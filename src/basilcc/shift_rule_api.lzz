namespace basilcc
{
  class CC;
  class Priority;

  // freeze shift rule and return shared rule, reuse shift_rule or delete it
  ShiftRulePtr freezeShiftRule (CC & cc, ShiftRulePtr & shift_rule)
  {
    return getTable <ShiftRuleTable> (cc).freeze (shift_rule);
  }
  // functor
  inline ShiftRulePtr FreezeShiftRule (CC & cc; ShiftRulePtr & shift_rule)
  {
    return freezeShiftRule (cc, shift_rule);
  }

  // get shift rule from components
  ShiftRulePtr getShiftRule (CC & cc, BaseRulePtr base_rule, Priority const & sp)
  {
    return getTable <ShiftRuleTable> (cc).getRule (base_rule, sp);
  }

  // advance dot and return shift rule
  ShiftRulePtr getNextShiftRule (CC & cc, ShiftRulePtr shift_rule)
  {
    return getShiftRule (cc, getNextBaseRule (cc, shift_rule->getBaseRule ()), shift_rule->getShiftPriority ());
  }
}

#hdr
#include <basilcc/base_rule_ptr.h>
#include <basilcc/shift_rule_ptr.h>
#end

#src
#include <basilcc/base_rule_api.h>
#include <basilcc/cc.h>
#include <basilcc/shift_rule.h>
#include <basilcc/shift_rule_table.h>
#end
