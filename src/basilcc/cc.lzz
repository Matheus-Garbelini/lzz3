namespace basilcc
{
  // basil compiler compiler
  class CC
  {
  public:
    CC ()
    {
      // must first initialize all tables to 0
      fill (m_tables, ARRAY_END (m_tables), (Table *) 0);
      // EOT is token number 0
      m_eot_symbol = addToken (* this, intern ("EOT"), 0);
      m_start_symbol = getSymbol (* this, intern ("start"));
    }
    ~ CC ()
    {
      deleteObjects (m_tables, ARRAY_END (m_tables));
    }

    // get start symbol
    inline SymbolPtr getStartSymbol () const
    {
      return m_start_symbol;
    }

    // get EOT symbl
    inline SymbolPtr getEOTSymbol () const
    {
      return m_eot_symbol;
    }

    // get reference to table
    inline TablePtr & getTable (int num)
    {
      return m_tables [num];
    }
    // get table
    inline TablePtr getTable (int num) const
    {
      return m_tables [num];
    }

    // intern string, return char *
    inline char const * intern (std::string const & str)
    {
      return m_strings.insert (str).first->c_str ();
    }

    // run CC, return number of conflicts, if no conflicts write nodes and serialize
    int run (std::string const & states_filename, std::string const & nodes_filename, std::string const & fsm_filename)
    {
      freezeKeywords (* this);
      checkRules (* this);
      setFirst (* this);
      int num_conflicts = closure (* this);
      if (! states_filename.empty ())
      {
        printStates (* this, 0, states_filename); 
      }
      if (num_conflicts == 0)
      {
        setGoto (* this);
        printNodes (* this, nodes_filename);
        serialize (* this, fsm_filename);
      }
      return num_conflicts;
    }

  private:
    // tables 
    TablePtr m_tables [NUM_TABLES];
    // start and EOT symbols
    SymbolPtr m_start_symbol;
    SymbolPtr m_eot_symbol;
    // identifiers
    StringSet m_strings;
  }

  // get table T, create if doesn't exist
  template <class T>
  T & getTable (CC & cc)
  {
    TablePtr & table = cc.getTable (T::TABLE);
    if (! table)
    {
      table = new T ();
    }
    return static_cast <T &> (* table);
  }
  // const version
  template <class T>
  T & getTable (CC const & cc)
  {
    TablePtr table = cc.getTable (T::TABLE);
    assert (table);
    return static_cast <T &> (* table);
  }
}

using namespace std;

#hdr
#include <basilcc/symbol_ptr.h>
#include <basilcc/table_number.h>
#include <basilcc/table_ptr.h>
#include <util/string_set.h>
#include <assert.h>
#include <string>
#end

#src
#include <basilcc/check_rules.h>
#include <basilcc/closure.h>
#include <basilcc/print_nodes.h>
#include <basilcc/print_state.h>
#include <basilcc/serialize.h>
#include <basilcc/set_first.h>
#include <basilcc/set_goto.h>
#include <basilcc/symbol_api.h>
#include <basilcc/table.h>
#include <basilcc/util.h>
#include <util/array_size.h>
#include <algorithm>
#end
