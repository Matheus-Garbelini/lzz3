namespace basilcc
{
  class CC;

  // add token
  SymbolPtr addToken (CC & cc, Ident name, int num)
  {
    return getTable <SymbolTable> (cc).addToken (name, num);
  }

  // add keyword
  void addKeyword (CC & cc, Ident name, std::string const & lexeme)
  {
    return getTable <SymbolTable> (cc).addKeyword (name, lexeme);
  }

  // freeze keywords, call after all keywords have been added
  void freezeKeywords (CC & cc)
  {
    return getTable <SymbolTable> (cc).freezeKeywords ();
  }

  // get symbol from name, returns existing symbol if already exists, otherwise, if non-terminal, will create a new one
  SymbolPtr getSymbol (CC & cc, Ident name)
  {
    return getTable <SymbolTable> (cc).getSymbol (name);
  }

  // get all tokens
  SymbolPtrVector const & getTokens (CC const & cc)
  {
    return getTable <SymbolTable> (cc).getTokens ();
  }

  // get all keywords (sorted by lexeme)
  StringIntVector const & getKeywords (CC const & cc)
  {
    return getTable <SymbolTable> (cc).getKeywords ();
  }
  
  // get nonterminals
  SymbolPtrVector const & getNonTerminals (CC const & cc)
  {
    return getTable <SymbolTable> (cc).getNonTerminals ();
  }

  // get start symbol
  SymbolPtr getStartSymbol (CC const & cc)
  {
    return cc.getStartSymbol ();
  }

  // get EOT symbol
  SymbolPtr getEOTSymbol (CC const & cc)
  {
    return cc.getEOTSymbol ();
  }

  // add sequence of tokens with iterators
  void addTokens (CC & cc, TokenNumberPtr beg, TokenNumberPtr end)
  {
    for_each (beg, end, AddToken (cc, getTable <SymbolTable> (cc)));
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  inline void AddToken (CC & cc, SymbolTable & symbol_table; TokenNumber const & token_number) const
  {
    symbol_table.addToken (cc.intern (token_number.name), token_number.num);
  }
}

#hdr
#include <basilcc/symbol_ptr_vector.h>
#include <basilcc/token_number.h>
#include <util/ident.h>
#include <util/string_int_vector.h>
#end

#src
#include <basilcc/cc.h>
#include <basilcc/symbol_table.h>
#include <algorithm>
#end
