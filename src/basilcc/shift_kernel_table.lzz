namespace basilcc
{
  class ShiftKernelTable : public Table
  {
  public:
    ShiftKernelTable ()
    {}
    ~ ShiftKernelTable ()
    {
      deleteObjects (m_shift_kernels.begin (), m_shift_kernels.end ());
    }

    // get shift kernel from kernel shift rules
    ShiftKernelPtr getShiftKernel (ShiftRulePtrVector & shift_rules)
    {
      for_each (shift_rules.begin (), shift_rules.end (), PlugShiftRule (m_shift_kernel_trie));
      ShiftKernelPtr & shift_kernel = m_shift_kernel_trie.commit (0);
      if (! shift_kernel)
      {
        shift_kernel = * m_shift_kernels.insert (m_shift_kernels.end (), new ShiftKernel (shift_rules));
      }
      return shift_kernel;
    }

    enum { TABLE = TABLE_SHIFT_KERNEL }
  private:
    ShiftKernelPtrTrie m_shift_kernel_trie;
    ShiftKernelPtrVector m_shift_kernels;
  }
}

using namespace basilcc;

namespace
{
  inline void PlugShiftRule (ShiftKernelPtrTrie & trie; ShiftRulePtr shift_rule)
  {
    trie.plug (unsigned (shift_rule));
  }
}

#hdr
#include <basilcc/shift_kernel_ptr_trie.h>
#include <basilcc/shift_kernel_ptr_vector.h>
#include <basilcc/shift_rule_ptr_vector.h>
#include <basilcc/table.h>
#end

#src
#include <basilcc/shift_kernel.h>
#include <basilcc/util.h>
#end
