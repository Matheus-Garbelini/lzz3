// bootstrap compiler
void bootstrap (std::string const & scripts_dir)
{
  (Bootstrap (scripts_dir) ());
}

// compile basil
void compileBasil (std::string const & scripts_dir)
{
  compile (scripts_dir, rule_lexer::token_numbers, rule_lexer::token_numbers_end, BASIL_RULES, BASIL_STATES, BASIL_NODES, BASIL_FSM);
}

// compile lzz
void compileLzz (std::string const & scripts_dir)
{
  compile (scripts_dir, cpp::token_numbers, cpp::token_numbers_end, LZZ_RULES, LZZ_STATES, LZZ_NODES, LZZ_FSM);
}

using namespace std;

namespace
{
  struct CCApp
  {
    CCApp (lua_State * L)
    {
      basilcc::registerCC (L, cc);
    }
    void addTokens (basilcc::TokenNumberPtr beg, basilcc::TokenNumberPtr end)
    {
      basilcc::addTokens (cc, beg, end);
    }
    void runcc (string const & states_filename, string const & nodes_filename, string const & fsm_filename)
    {
      cc.run (states_filename, nodes_filename, fsm_filename);
    }
    basilcc::CC cc;
  };

  // bootstrap compiler
  void Bootstrap (string const & scripts_dir;) : LuaEnv (scripts_dir), CCApp (L)
  {
    addTokens (rule_lexer::token_numbers, rule_lexer::token_numbers_end);
    string boostrap_filename = path (BASIL_BOOTSTRAP);
    if (luaL_dofile (L, boostrap_filename.c_str ()) != 0)
    {
      string errmsg = lua_tostring (L, -1);
      lua_pop (L, 1);
      ThrowException () << errmsg;
    }
    runcc (path (BASIL_STATES), path (BASIL_NODES), path (BASIL_FSM));
  }

  // grammar compiler
  void Compiler (string const & scripts_dir;
      basilcc::TokenNumberPtr tokens_beg, basilcc::TokenNumberPtr tokens_end,
      char const * rules_filename, char const * states_filename, char const * nodes_filename, char const * fsm_filename)
    : basil::App (scripts_dir, BASIL_FSM, BASIL_APP), CCApp (L)
  {
    addTokens (tokens_beg, tokens_end);
    rule_lexer::RuleLexer lexer (cc, path (rules_filename));
    Logger logger (cout);
    run (lexer, logger);
    runcc (path (states_filename), path (nodes_filename), path (fsm_filename));
  }
  inline void compile (string const & scripts_dir, basilcc::TokenNumberPtr tokens_beg, basilcc::TokenNumberPtr tokens_end,
      char const * rules, char const *states, char const * nodes, char const * fsm)
  {
    (Compiler (scripts_dir) (tokens_beg, tokens_end, rules, states, nodes, fsm));
  }
}

#hdr
#include <string>
#end

#src
#include <app/filenames.h>
#include <basil/app.h>
#include <basil/fsm.h>
#include <basil/parser.h>
#include <basilcc/cc.h>
#include <basilcc/register_cc.h>
#include <basilcc/rule_lexer.h>
#include <basilcc/symbol_api.h>
#include <cpp/token_numbers.h>
#include <util/logger.h>
#include <util/throw_exception.h>
#include <iostream>

// namespace alias not supported!
namespace rule_lexer = basilcc::rule_lexer;
#end
