// run lzz over all lzz files
int runLzz (std::string const & scripts_dir, StringVector const & filenames)
{
  LuaEnv env (scripts_dir);
  lua_State * L = env.L;
  basil::Engine engine (L, env.path (LZZ_FSM), cpp::token_numbers, cpp::token_numbers_end, env.path (LZZ_APP));
  StringIntVector const & keywords = engine.getKeywords ();
  int rc = 0;
  for (StringVectorConstIter i = filenames.begin (), endi = filenames.end (); i != endi; ++ i)
  {
    string const & filename (* i);
    StringSet strings;
    Output output (filename);
    ErrorSink error_sink (cout);
    try
    {
      Lzz (L).run (strings, engine, keywords, filename, output, error_sink);
    }
    catch (ParseError const & e)
    {
      error_sink.error (e.what ());
      rc = 1;
    }
    output.close (! error_sink.has_error);
  }
  return rc;
}

using namespace std;

namespace
{
  struct Lzz
  {
    Lzz (lua_State * L)
      : L (L)
    {}
    ~ Lzz ()
    {
      lua_pushnil (L);
      lua_setglobal (L, "lzz");
      luaL_unref (L, LUA_REGISTRYINDEX, lzz_ref);
    }
    void run (StringSet & strings, basil::Engine & engine, StringIntVector const & keywords,
        string const & filename, Output & output, ErrorSink & error_sink)
    {
      lzz_ref = registerOutput (L, output, error_sink);
      lua_rawgeti (L, LUA_REGISTRYINDEX, lzz_ref);
      lua_setglobal (L, "lzz");
      cpp::Session session (strings, keywords, output, error_sink);
      cpp::Preprocessor preprocessor (session, filename);
      basil::App app (engine);
      app.parse (preprocessor, error_sink);
      if (! error_sink.has_error)
      {
        app.finalize ();
      }
    }
    lua_State * L;
    int lzz_ref;
  }

  char const LZZ_APP [] = "lzz_app.lua";
  char const LZZ_FSM [] = "lzz.fsm";
}


#hdr
#include <util/string_vector.h>
#end

#src
#include <cpp/preprocessor.h>
#include <cpp/session.h>
#include <cpp/token_numbers.h>
#include <output/output.h>
#include <output/output_lua.h>
#include <util/error_sink.h>
#include <util/lua_env.h>
#include <util/parse_error.h>
#include <util/string_set.h>
#include <basil/app.h>
#include <basil/engine.h>
#include <basil/fsm.h>
#include <iostream>
#end
