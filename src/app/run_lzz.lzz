// run lzz over all lzz files
void runLzz (std::string const & scripts_dir, StringVector const & filenames)
{
  LuaEnv env (scripts_dir);
  basil::FSM fsm (env.path (LZZ_FSM), cpp::token_numbers, cpp::token_numbers_end);
  StringIntVector const & keywords = fsm.getKeywords ();
  basil::ParserApp app (env.L, fsm);
  app.load (env.path (LZZ_APP));
  for (StringVectorConstIter i = filenames.begin (), endi = filenames.end (); i != endi; ++ i)
  {
    string const & filename (* i);
    StringSet strings;
    Output output (filename);
    Logger logger (cout);
    try
    {
      Lzz (env.L).run (strings, app, keywords, filename, output, logger);
    }
    catch (ParseError const & e)
    {
      logger.error (e.what ());
    }
    output.close (! logger.hasError ());
  }
}

using namespace std;

namespace
{
  struct Lzz
  {
    Lzz (lua_State * L)
      : L (L)
    {}
    ~ Lzz ()
    {
      lua_pushnil (L);
      lua_setglobal (L, "lzz");
      luaL_unref (L, LUA_REGISTRYINDEX, lzz_ref);
    }
    void run (StringSet & strings, basil::ParserApp & app, StringIntVector const & keywords,
        string const & filename, Output & output, Logger & logger)
    {
      lzz_ref = registerOutput (L, output, logger);
      lua_rawgeti (L, LUA_REGISTRYINDEX, lzz_ref);
      lua_setglobal (L, "lzz");
      cpp::Session session (strings, keywords, output, logger);
      cpp::Preprocessor preprocessor (session, filename);
      app.run (preprocessor, logger);
    }
    lua_State * L;
    int lzz_ref;
  }

  char const LZZ_APP [] = "lzz_app.lua";
  char const LZZ_FSM [] = "lzz.fsm";
}


#hdr
#include <util/string_vector.h>
#end

#src
#include <cpp/preprocessor.h>
#include <cpp/session.h>
#include <cpp/token_numbers.h>
#include <output/output.h>
#include <output/output_lua.h>
#include <util/logger.h>
#include <util/lua_env.h>
#include <util/parse_error.h>
#include <util/string_set.h>
#include <basil/fsm.h>
#include <basil/parser_app.h>
#include <iostream>
#end
