namespace config
{
  // print version to standard output
  void printVersion (std::ostream & os)
  {
    os << version_text;
    os.flush ();
  }

  // print help to standard output
  void printHelp (std::ostream & os)
  {
    os << version_text;
    os << usage_text;
    os.flush ();
  }
}

namespace
{
  char const version_text [] =
  {
    "Lazy C++ " LZZ_VERSION
    "\n"
  };

  char const usage_text [] =
  {
    "Usage: lzz [options] filenames ...\n"
    "options:\n"
    " -z       Boostrap parser\n"
    " -y       Compile parser grammar\n" 
    " -g       Compile lzz grammar\n"
    " -i       Output inline definitions to inline file\n"
    " -t       Output template definitions to template file\n"
    " -n       Output inline template definitions to template inline file\n"
    " -hx EXT  Set header filename extension\n"
    " -sx EXT  Set source filename extension\n"
    " -ix EXT  Set inline filename extension\n"
    " -tx EXT  Set template filename extension\n"
    " -nx EXT  Set template inline filename extension\n"
    " -hl      Ouput #lines in header file\n"
    " -sl      Ouput #lines in source file\n"
    " -il      Ouput #lines in inline file\n"
    " -tl      Ouput #lines in template file\n"
    " -nl      Ouput #lines in template inline file\n"
    " -hd      Write header file only if different than previous\n"
    " -sd      Write source file only if different than previous\n"
    " -id      Write inline file only if different than previous\n"
    " -td      Write template file only if different than previous\n"
    " -nd      Write template inline file only if different than previous\n"
    " -c       Create source file if header file is created\n"
    " -o DIR   Set output directory for files\n"
    " -d       Delete old files no longer created\n"
    " -I DIR   Search directory for #include and #insert files\n"
    " -D NAME  Define function or object macro (replacement text follows '=')\n"
    " -a FNAME Automatically #include file at start of file\n"
    " -k NAME  Set the package name (will embed name in include guard)\n"
    /* to do
    " -da NAME Set the macro that project defines to __declspec(dllimport) or __declspec(dllexport)\n"
    " -dx NAME Set the macro that is non-zero when project is compiled to export DLL symbols\n"
    */
    " -b NUM   Set number of characters for tab (default is 8)\n"
    " -v       Print the version number\n"
    " -h\n"
    " -help    Print this help text\n"
    /* to do
    " -tr      Print parse trace\n"
    */
    "Options can also be specified in the environment variable LZZ_OPTIONS\n"
    "To turn off a boolean option precede the option with '-no'\n"
    "For further help, see http://www.lazycplusplus.com\n"
    "Copyright (C) 2001-2016, Mike Spencer (mike@lazycplusplus.com)\n"
    "Lua 5.3 Copyright (C) 1994-2016 Lua.org, PUC-Rio\n"
  };
}

#hdr
#include <iosfwd>
#end

#src
#include <config/version.h>
#include <iostream>
#end
