// config_config
//

namespace config
{
  // parse command line options
  void parseOptions(int argc, char **argv, StringVector &files)
  {
    // env options then cmd line
    parseEnvOptions();
    parseCmdLine(argc, argv, files);
  }
}

using namespace config;

namespace
{
   // option record
   struct OptionRec
   {
      // name
      char const *name;
      // old name (for backward compatibility)
      char const *old_name;
      // option
      Option *option;
   };

   // option records
   OptionRec option_rec_set[] =
   {
      { "i", "inl", & opt_inl },
      { "t", "tpl", & opt_tpl },
      { "n", "tnl", & opt_tnl },
      { "hx", "hdr-ext", & opt_hdr_ext },
      { "sx", "src-ext", & opt_src_ext },
      { "ix", "inl-ext", & opt_inl_ext },
      { "tx", "tpl-ext", & opt_tpl_ext },
      { "nx", "tnl-ext", & opt_tnl_ext },
      { "hl", "hdr-line", & opt_hdr_line },
      { "sl", "src-line", & opt_src_line },
      { "il", "inl-line", & opt_inl_line },
      { "tl", "tpl-line", & opt_tpl_line },
      { "nl", "tnl-line", & opt_tnl_line },
      { "hd", "hdr-smart-write", & opt_hdr_smart_write },
      { "sd", "src-smart-write", & opt_src_smart_write },
      { "id", "inl-smart-write", & opt_inl_smart_write },
      { "td", "tpl-smart-write", & opt_tpl_smart_write },
      { "nd", "tnl-smart-write", & opt_tnl_smart_write },
      { "c", "src-if-hdr", & opt_src_if_hdr },
      { "o", "out-dir", & opt_out_dir },
      { "d", "delete-old", & opt_delete_old },
      { "I", 0, & opt_incl_path_set },
      { "D", 0, & opt_macro_set },
      { "a", 0, & opt_auto_includes },
      { "b",  0, & opt_tab_stop },
      { "k", 0, & opt_package },
      { "da", "dll-api", & opt_dll_api },
      { "dx", "dll-exports", & opt_dll_exports },
      { "v", 0,  & opt_version },
      { "h", "help", & opt_help },

      /* to do or deprecate
         { "e",  0, & opt_prep_block },
         { "tr", 0, & opt_trace },
         { "x", 0, & opt_expand_filename },
         { "p", 0, & opt_pp },
         { "P", 0, & opt_pp_all },
         { "E", 0, & opt_pp_incl },
         { "r", 0, & opt_rec },
      */
   };

   // number of options
   const int num_options = ARRAY_SIZE(option_rec_set);

   // get option, return 0 if not found
   Option *getOption(char const *name)
   {
      Option *option = 0;
      OptionRec const *beg = option_rec_set;
      OptionRec const *end = option_rec_set + num_options;
      for (; beg != end; ++beg)
      {
         if ((beg->name != 0 && strcmp (beg->name, name) == 0) || (beg->old_name != 0 && strcmp (beg->old_name, name) == 0))
         {
            option = beg->option;
            break;
         }
      }
      return option;
   }

   // parse env options in LZZ_OPTIONS string
   void parseEnvOptions(std::string const &str)
   {
      StringConstIter str_beg = str.begin();
      StringConstIter str_end = str.end();
      char const * ws = " \t";
      for (;;)
      {
         std::string word = getNextWord(skipWs(str_beg, str_end, ws), str_end, ws, str_beg);
         if (word.empty())
         {
            break;
         }
         char const *opt = word.c_str();
         // discard leading dash if present
         if (opt[0] == '-')
         {
            ++opt;
            if (opt[0] == '\0' || opt[0] == ' ')
            {
               throw std::runtime_error("option expected after dash");
            }
         }
         // check if single letter option
         if (isupper(opt[0]) && opt[1] != '\0')
         {
            // search for option
            char opt1[2];
            opt1[0] = opt[0];
            opt1[1] = '\0';
            Option *option = getOption(opt1);
            if (!option)
            {
               throw std::runtime_error(Message("invalid option: % ") << opt1);
            }
            option->setValue(opt + 1);
         }
         else
         {
            // check if preceded with 'no-'
            bool has_no = false;
            if (memcmp(opt, "no-", 3) == 0)
            {
               has_no = true;
               opt += 3;
            }
            // get option
            Option *option = getOption(opt);
            if (!option)
            {
               throw std::runtime_error(Message("invalid option: % ") << opt);
            }
            if (option->isBoolOption())
            {
               // has_no is the value
               option->setValue(has_no ? "no" : "yes");
            }
            else if (has_no)
            {
               throw std::runtime_error(Message("option cannot take a 'no' prefix: %") << opt);
            }
            else
            {
               std::string value = getNextWord(skipWs(str_beg, str_end, ws), str_end, ws, str_beg);
               if (value.empty())
               {
                  throw std::runtime_error(Message("value expected after option %") << opt);
               }
               option->setValue(value);
            }
         }
      }
   }

   // parse options in LZZ_OPTIONS, return true if no errors
   void parseEnvOptions()
   {
      // do nothing if environment variable is not set
      std::string env_options;
      if (getEnv("LZZ_OPTIONS", env_options))
      {
         parseEnvOptions(env_options);
      }
   }

   // parse command line options, return true if no errors
   void parseCmdLine(int argc, char **argv, StringVector &files)
   {
      for (int i = 1; i < argc; ++i)
      {
         char *opt = argv[i];
         if (*opt != '-')
         {
            // must be file name
            files.push_back(argv[i]);
         }
         else
         {
            ++opt;
            // check if has opt
            if (*opt == '\0')
            {
               throw std::runtime_error("option expected after '-'");
            }
            // check if single letter option, eg: -D or -I
            if (isupper(opt[0]) && opt[1] != '\0')
            {
               // search for option
               char opt1[2];
               opt1[0] = opt[0];
               opt1[1] = '\0';
               Option *option = getOption(opt1);
               if (!option)
               {
                  throw std::runtime_error(Message("% is not a valid option") << opt1);;
               }
               option->setValue(opt + 1);
            }
            else
            {
               // check if preceeded with "no-"
               bool has_no = false;
               if (memcmp(opt, "no-", 3) == 0)
               {
                  has_no = true;
                  opt += 3;
               }
               // search for option
               Option *option = getOption(opt);
               if (!option)
               {
                  throw std::runtime_error(Message("% is not a valid option") << opt);
               }
               // bool option has no value
               if (option->isBoolOption())
               {
                  // has_no is the value
                  option->setValue(has_no ? "no" : "yes");
               }
               // get value
               else
               {
                  if (has_no)
                  {
                     throw std::runtime_error(Message("% is not a yes/no option") << opt);
                  }
                  if (i + 1 == argc)
                  {
                     throw std::runtime_error(Message("valid expected after option %") << opt);
                  }
                  char const *value = argv[++i];
                  option->setValue(value);
               }
            }
         }
      }
   }
}

#hdr
#include <util_string_vector.h>
#end

#src
#include <config_option.h>
#include <config_options.h>
#include <util_array_size.h>
#include <util_file_op.h>
#include <util_get_env.h>
#include <util_get_next_word.h>
#include <util_message.h>
#include <util_skip_ws.h>
#include <cstring>
#include <stdexcept>
#end
