// cpp_session.lzz
//

namespace lzz { class Output; }

namespace cpp
{
   // State?
   class Session
   {
   public:
      Session(StringSet &strings, StringIntVector const &keywords, lzz::Output &output)
         : m_strings(strings), m_keywords(keywords), m_output(output)
      {
         m_macro_table.init(*this); 
      }
      ~Session()
      {}

      // intern string
      char const *intern(std::string const &str)
      {
         return m_strings.insert(str).first->c_str();
      }

      // if lexeme is a keyword set token number and return true
      bool isKeyword(std::string const &lexeme, int &number)
      {
         bool res = false;
         // keywords sorted by name 
         StringIntVectorConstIter p = std::lower_bound(m_keywords.begin(), m_keywords.end(), lexeme, StringIntFirstLess());
         if (p != m_keywords.end() && p->first == lexeme)
         {
            number = p->second;
            res = true;
         }
         return res;
      }

      void warning(Loc const &loc, std::string const &msg) const
      {
         m_output.warning(loc, msg);
      }
      void warning(std::string const &msg) const
      {
         m_output.warning(msg);
      }
      void error(Loc const &loc, std::string const &msg) const
      {
         m_output.error(loc, msg);
      }
      void error(std::string const &msg) const
      {
         m_output.error(msg);
      }

      // print (#hdr, #src, etc) block to file
      inline lzz::Output &getOutput() const
      {
         return m_output;
      }

      // get dir table
      inline DirTable &getDirTable()
      {
         return m_dir_table;
      }

      // get macro table
      inline MacroTable &getMacroTable()
      {
         return m_macro_table;
      }

      // get keyword table
      inline KeywordTable &getKeywordTable()
      {
         return m_keyword_table;
      }

   private:
      StringSet &m_strings;
      // keyword token numbers
      StringIntVector const &m_keywords;
      DirTable m_dir_table;
      MacroTable m_macro_table;
      // preprocessor keywords
      KeywordTable m_keyword_table;
      lzz::Output &m_output;
   };
}

#hdr
#include <cpp_dir_table.h>
#include <cpp_file_type.h>
#include <cpp_keyword_table.h>
#include <cpp_macro_table.h>
#include <util_loc.h>
#include <util_string_int_vector.h>
#include <util_string_set.h>
#include <iosfwd>
#end

#src
#include <lzz_output.h>
#include <algorithm>
#include <iostream>
#end
