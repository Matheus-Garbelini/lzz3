namespace cpp
{
  // macro filter implementation
  class MacroFilterImpl (Session & session, StringVector & history, TokenPtrDeque & out_tokens)
  {
  public:
    // true if in #if context
    bool if_context = false;

    // pass tokens through filter
    void next (TokenPtrVector const & in_tokens)
    {
      for (TokenPtrVectorConstIter i = in_tokens.begin (), endi = in_tokens.end (); i != endi; ++ i)
      {
        next (* i);
      }
    }
    // pass token through filter
    void next (TokenPtr const & token)
    {
      Loc const & loc = token->getLoc ();
      int number = token->getNumber ();
      bool pass = true;
      switch (state)
      {
        case MAYBE_FUNC_STATE:
        {
          if (number == TOKEN_LPAREN)
          {
            // capture func args
            pass = false;
            //num_params = static_cast <FuncMacro const &> (* func_macro).getNumParams ();
            //var = static_cast <FuncMacro const &> (* func_macro).hasVarArgs ();
            state = FUNC_ARG_STATE;
            break;
          }
          else
          {
            // was not a func macro
            passToken (func_macro_token);
            func_macro_token = TokenPtr ();
            state = START_STATE;
          }
        }
        case START_STATE:
        {
          if (number == TOKEN_IDENT)
          {
            // check if macro
            std::string const & name = token->getLexeme ();
            if (if_context && name == "defined")
            {
              if (is_sub)
              {
                // should only see defined in #if expr, not in macro, give warning
                session.warning (sub_loc, DefinedInIfMacro ());
              }
              // skip over next token, of if next is left paren, skip over two
              state = IF_DEFINED_STATE;
            }
            else if (! token->isRecSubMacro ())
            {
              MacroPtr macro;
              if (isMacro (session, name, macro))
              {
                // check if macro already replaced
                if (isMacroInHistory (name))
                {
                  token->setRecSubMacro ();
                }
                else
                {
                  pass = false;
                  MacroKind macro_kind = macro->getKind ();
                  if (macro_kind == OBJ_MACRO)
                  {
                    TokenPtrVector rep_tokens;
                    static_cast <RepMacro const &> (* macro).getRepTokens (rep_tokens);
                    subObjRepSet (loc, name, rep_tokens);
                  }
                  else if (macro_kind == FILE_MACRO)
                  {
                    // __FILE__
                    Loc const & file_loc = is_sub ? sub_loc : loc;
                    string lexeme_str;
                    lexeme_str += '\"';
                    lexeme_str += file_loc.getFilename ();
                    lexeme_str += '\"';
                    TokenPtrVector rep_tokens;
                    rep_tokens.push_back (new Token (TOKEN_LITERAL_STRING, loc, lexeme_str));
                    subObjRepSet (loc, name, rep_tokens);
                  }
                  else if (macro_kind == LINE_MACRO)
                  {
                    // __LINE__
                    Loc const & line_loc = is_sub ? sub_loc : loc;
                    string lexeme_str = intToString (line_loc.getLine ());
                    TokenPtrVector rep_tokens;
                    rep_tokens.push_back (new Token (TOKEN_LITERAL_INT, loc, lexeme_str));
                    subObjRepSet (loc, name, rep_tokens);
                  }
                  else
                  {
                    // otherwise function macro--if left paren follows
                    func_macro_token = token;
                    func_macro = macro;
                    //num_params = static_cast <FuncMacro const &> (* macro).getNumParams ();
                    // var = static_cast <FuncMacro const &> (* macro).hasVarArgs ();
                    state = MAYBE_FUNC_STATE;
                  }
                }
              }
            }
          }
          break;
        }
        // func args
        case FUNC_ARG_STATE:
        {
          pass = false;
          int num_params = static_cast <FuncMacro const &> (* func_macro).getNumParams ();
          bool var = static_cast <FuncMacro const &> (* func_macro).hasVarArgs ();
          // end of argument if non-nested comma or right paren
          if (nest == 0 && (number == TOKEN_RPAREN || number == TOKEN_COMMA && ! (var && (int) args.size () + 1 >= num_params)))
          {
            if (! arg_tokens.empty ())
            {
              // add next arg and clear arg set
              args.push_back (new MacroArg (arg_tokens));
              arg_tokens.clear ();
            }
            else if (number == TOKEN_COMMA || ! args.empty () || num_params == 1 && ! var)
            {
              // undefined behavior (16.3/10), just give warning
              session.warning (token->getLocation (), EmptyFunctionMacroArgument ());
              args.push_back (new MacroArg (arg_tokens));
            }
            // end of arg list if right paren
            if (number == TOKEN_RPAREN)
            {
              // keep a local reference to func macro token as func_macro_token can be reassigned in recursive call
              TokenPtr func_macro_token_copy = func_macro_token;
              Loc const & macro_loc = func_macro_token->getLocation ();
              // check number of args
              int num_args = args.size ();
              if (var && num_args + 1 == num_params)
              {
                // add empty arg for var param
                args.push_back (new MacroArg (arg_tokens));
                ++ num_args;
              }
              string const & macro_name = func_macro->getName ();
              if (num_args != num_params)
              {
                if (var)
                {
                  throw ParseException (macro_loc, BadNumArgsInVarMacro (num_args, num_params-1));
                }
                else
                {
                  throw ParseException (macro_loc, BadNumArgsInMacro (num_args, num_params));
                }
              }
              TokenPtrVector rep_tokens;
              static_cast <FuncMacro const &> (* func_macro).getRepTokens (rep_tokens);
              if (! rep_tokens.empty ())
              {
                MacroArgPtrVector args_copy (args);
                args.clear ();
                state = START_STATE;
                subFuncRepSet (macro_loc, macro_name, rep_tokens, args_copy, var);
              }
              else
              {
                args.clear ();
                state = START_STATE;
              }
            }
          }
          else 
          {
            // adjust nesting level
            if (number == TOKEN_LPAREN)
            {
              ++ nest;
            }
            else if (number == TOKEN_RPAREN)
            {
              -- nest;
            }
            // add arg token
            arg_tokens.push_back (token);
          }
          break;
        }
        // defined
        case IF_DEFINED_STATE:
        {
          if (number == TOKEN_LPAREN)
          {
            state = IF_DEFINED_LPAREN_STATE;
          }
          else
          {
            state = START_STATE;
          }
          break;
        }
        // defined followed by left paren
        case IF_DEFINED_LPAREN_STATE:
        {
          state = START_STATE;
          break;
        }
      }
      // pass token?
      if (pass)
      {
        passToken (token);
      }
    }

    // no more macro args
    void flush ()
    {
      if (state == FUNC_ARG_STATE)
      {
        // eof in arg list, can't continue
        throw ParseException (func_macro_token->getLoc (), EOFInFunctionMacroArgument ());
      }
      if (state == MAYBE_FUNC_STATE)
      {
        // wasn not a function macro
        passToken (func_macro_token);
        func_macro_token = TokenPtr ();
      }
      state = START_STATE;
    }

  private:
    // true if macro is in history
    bool isMacroInHistory (std::string const & name) const
    {
      return std::find (history.begin (), history.end (), name) != history.end ();
    }
    // pass token to out tokens vector
    void passToken (TokenPtr const & token)
    {
      if (is_sub)
      {
        token->setLoc (sub_loc);
      }
      out_tokens.push_back (token);
    }
    // substitute obj macro replacement
    void subObjRepSet (Loc const & loc, std::string const & name, TokenPtrVector const & rep_tokens)
    {
      if (is_sub)
      {
        subObjRepSet (name, rep_tokens);
      }
      else
      {
        is_sub = true;
        sub_loc = loc;
        subObjRepSet (name, rep_tokens);
        is_sub = false;
      }
    }
    // substitute obj macro replacement set
    void subObjRepSet (std::string const & name, TokenPtrVector const & rep_tokens)
    {
      TokenPtrVector tokens;
      for (TokenPtrVectorConstIter i = rep_tokens.begin (), endi = rep_tokens.end (); i != endi; ++ i)
      {
        TokenPtr token = * i;
        tokens.push_back (token);
        while (i + 1 != endi && (* (i + 1))->getNumber () == TOKEN_DBLHASH)
        {
          ++ i;
          Loc const & op_loc = (* i)->getLocation ();
          ++ i;
          concatToken (sub_loc, op_loc, * i, tokens);
        }
        next (name, tokens);
        tokens.clear ();
      }
    }
    // substitute func macro
    void subFuncRepSet (Loc const & loc, std::string const & name, TokenPtrVector const & rep_tokens,
        MacroArgPtrVector const & args, bool var)
    {
      if (is_sub)
      {
        subFuncRepSet (name, rep_tokens, args, var);
      }
      else
      {
        is_sub = true;
        sub_loc = loc;
        subFuncRepSet (name, rep_tokens, args, var);
        is_sub = false;
      }
    }
    // substitute func macro, rep_set is valid
    void subFuncRepSet (std::string const & name, TokenPtrVector const & rep_tokens, MacroArgPtrVector const & args, bool var)
    {
      TokenPtrVector tokens;
      for (TokenPtrVectorConstIter i = rep_tokens.begin (), endi = rep_tokens.end (); i != endi; ++ i)
      {
        TokenPtr const & token = * i;
        int number = token->getNumber ();
        if (number == TOKEN_HASH)
        {
          // next token must be param
          int param = (* ++ i)->getNumber () - TOKEN_IDENT_PARAM_START;
          TokenPtrVector const & arg_tokens = args [param]->getTokens ();
          tokens.push_back (stringizeTokenSet (token->getLocation (), arg_tokens));
        }
        else if (number >= TOKEN_IDENT_PARAM_START)
        {
          int param = number - TOKEN_IDENT_PARAM_START;
          TokenPtrVector arg_tokens;
          cloneTokens (args [param]->getTokens (), arg_tokens);
          if (i + 1 != endi && (* (i + 1))->getNumber () == TOKEN_DBLHASH)
          {
            tokens.insert (tokens.end (), arg_tokens.begin (), arg_tokens.end ());
          }
          else
          {
            // pass arg tokens through new filter with same history
            TokenPtrDeque arg_out_tokens;
            MacroFilterImpl arg_filter (session, history, arg_out_tokens);
            arg_filter.next (arg_tokens);
            arg_filter.flush ();
            tokens.insert (tokens.end (), arg_out_tokens.begin (), arg_out_tokens.end ());
          }
        }
        else
        {
          tokens.push_back (token);
        }
        while (i + 1 != endi && (* (i + 1))->getNumber () == TOKEN_DBLHASH)
        {
          ++ i;
          Loc const & op_loc = (* i)->getLocation ();
          ++ i;
          TokenPtr token = * i;
          int number = token->getNumber ();
          if (number == TOKEN_HASH)
          {
            ++ i;
            TokenPtr token = * i;
            int param = token->getNumber () - TOKEN_IDENT_PARAM_START;
            TokenPtrVector const & arg_tokens = args [param]->getTokens ();
            concatToken (sub_loc, op_loc, stringizeTokenSet (token->getLocation (), arg_tokens), tokens);
          }
          else if (number >= TOKEN_IDENT_PARAM_START)
          {
            int param = number - TOKEN_IDENT_PARAM_START;
            TokenPtrVector arg_tokens;
            cloneTokens (args [param]->getTokens (), arg_tokens);
            // remove last comma if param is var param and arg set is empty 
            if (var && param == args.size () - 1 && ! tokens.empty () && tokens.back ()->getNumber () == TOKEN_COMMA)
            {
              if (arg_tokens.empty ())
              {
                tokens.pop_back ();
              }
              else
              {
                tokens.insert (tokens.end (), arg_tokens.begin (), arg_tokens.end ());
              }
            }            
            else if (! arg_tokens.empty ())
            {
              concatToken (sub_loc, op_loc, arg_tokens.front (), tokens);
              tokens.insert (tokens.end (), arg_tokens.begin () + 1, arg_tokens.end ());
            }
          }
          else
          {
            concatToken (sub_loc, op_loc, token, tokens);
          }
        }
        next (name, tokens);
        tokens.clear ();
      }
    }
    // next, push macro name on stack first, pop off when finished
    void next (std::string const & name, TokenPtrVector const & in_tokens)
    {
      history.push_back (name);
      next (in_tokens);
      history.pop_back ();
    }
    // stringize token, use loc as location of string token
    TokenPtr stringizeTokenSet (Loc const & loc, TokenPtrVector const & tokens) const
    {
      string str ("\"");
      bool first = true;
      for (TokenPtrVectorConstIter beg = tokens.begin (), end = tokens.end (); beg != end; ++ beg)
      {
        TokenPtr token = * beg;
        // 16.3.2p2: white space before the first token and after the last token is deleted
        if (first)
        {
          first = false;
        }
        else if (token->hasSpaceBefore ())
        {
          str += ' ';
        }
        if (token->getNumber () == TOKEN_LITERAL_STRING || token->getNumber () == TOKEN_LITERAL_CHAR)
        {
          // prefix " and \ characters with backslash
          for (char const * s = token->getLexeme ().c_str (); * s != 0; ++ s)
          {
            // but don't escape the backslash preceding a unicode character
            if (* s == '\"' || * s == '\\' && (* (s + 1) == 0 || ! (* (s + 1) == 'u' || * (s + 1) == 'U')))
            {
              str += '\\';
            }
            str += * s;
          }
        }
        else
        {
          str += token->getLexeme ().c_str ();
        }
      }
      str += '\"';
      return new Token (TOKEN_LITERAL_STRING, loc, str);
    }
    // concat token to last token in token_set, append new token(s) to token_set, sub_loc is location of
    // macro substitution, op_loc is location of '##' operator,
    void concatToken (Loc const & sub_loc, Loc const & op_loc, TokenPtr token, TokenPtrVector & tokens) const
    {
      if (tokens.empty ())
      {
        tokens.push_back (token);
      }
      else
      {
        TokenPtr back_token = tokens.back ();
        tokens.pop_back ();
        string str = back_token->getLexeme ();
        str += token->getLexeme ();
        Lexer lexer (session, str, back_token->getLocation ());
        if (lexRestOfLine (lexer, tokens) != 1)
        {
          // scm::warning (session, back_token->getLocation (), msgConcatNotToken (back_token->getLexeme (), token->getLexeme ()));
        }
      }
    }
  private:
    // filter state
    enum State
    {
      // start
      START_STATE,
      // maybe func macro (name but not yet left paren)
      MAYBE_FUNC_STATE,
      // collecting func macro args
      FUNC_ARG_STATE,
      // defined in #if
      IF_DEFINED_STATE,
      // defined followed by left paren in #if
      IF_DEFINED_LPAREN_STATE,
    }
    State state = START_STATE;
    // saved func macro
    MacroPtr func_macro;
    // saved func macro token
    TokenPtr func_macro_token;
    // true if macro takes variable number of args
    //bool var;
    // number of params for function macro
    //int num_params;
    // nesting of parens in macro arg tokens
    int nest = 0;
    // current arg tokens
    TokenPtrVector arg_tokens;
    // macro arg set
    MacroArgPtrVector args;
    // true if substituting
    bool is_sub = false;
    // substitute location
    Loc sub_loc;
  }

  // macro filter
  class MacroFilter (Session & session, TokenPtrDeque & out_tokens)
    : public MacroFilterImpl (session, history, out_tokens)
  {
    StringVector history;
  }

  /*
  // HashIfMacroFilter
  // macro filter for #if line
  class HashIfMacroFilter (basl::TokenDeque & out_set) : public MacroFilter (true, true, history, out_set)
  {
    // macro history
    util::IdentVector history;
  }
  */
}

using namespace cpp;
using namespace cpp::msg;
using namespace std;

namespace
{
}

#hdr
#include <cpp/session_fwd.h>
#include <cpp/macro_arg_ptr_vector.h>
#include <cpp/macro_ptr.h>
#include <cpp/token_ptr_deque.h>
#include <cpp/token_ptr_vector.h>
#include <util/loc.h>
#include <util/string_vector.h>
#end

#src
#include <cpp/lexer.h>
#include <cpp/macro.h>
#include <cpp/macro_arg.h>
#include <cpp/macro_table.h>
#include <cpp/messages.h>
#include <cpp/token.h>
#include <cpp/token_numbers.h>
#include <util/int_to_string.h>
#include <util/parse_exception.h>
#include <algorithm>
#include <cpp/session.h>
#end

