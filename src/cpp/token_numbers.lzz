namespace cpp
{
  enum
  {
    TOKEN_EOT = 0,
    TOKEN_LPAREN,
    TOKEN_RPAREN,
    TOKEN_ASSIGN,
    TOKEN_OR,
    TOKEN_AND,
    TOKEN_EQ,
    TOKEN_NE,
    TOKEN_LT,
    TOKEN_GT,
    TOKEN_LE,
    TOKEN_GE,
    TOKEN_LSHIFT,
    TOKEN_RSHIFT,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_TIMES,
    TOKEN_DIVIDE,
    TOKEN_QMARK,
    TOKEN_COLON,
    TOKEN_BITOR,
    TOKEN_XOR,
    TOKEN_BITAND,
    TOKEN_NOTEQ,
    TOKEN_LTEQ,
    TOKEN_GTEQ,
    TOKEN_MOD,
    TOKEN_NOT,
    TOKEN_BITNOT,
    TOKEN_DBLHASH,
    TOKEN_HASH,
    TOKEN_ELLIPSE,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_PTR,
    TOKEN_INC,
    TOKEN_DEC,
    TOKEN_PTR_TIMES,
    TOKEN_DOT_TIMES,
    TOKEN_DCOLON,
    TOKEN_SEMI,
    TOKEN_LBRACK,
    TOKEN_RBRACK,
    TOKEN_XOR_ASSIGN,
    TOKEN_LBRACE,
    TOKEN_RBRACE,
    TOKEN_PLUS_ASSIGN,
    TOKEN_MINUS_ASSIGN,
    TOKEN_TIMES_ASSIGN,
    TOKEN_DIVIDE_ASSIGN,
    TOKEN_LSHIFT_ASSIGN,
    TOKEN_RSHIFT_ASSIGN,
    TOKEN_BITOR_ASSIGN,
    TOKEN_MOD_ASSIGN,
    TOKEN_BITAND_ASSIGN,
    TOKEN_LITERAL_INT,
    TOKEN_LITERAL_CHAR,
    TOKEN_LITERAL_FLOAT,
    TOKEN_LITERAL_STRING,
    TOKEN_ZERO,
    TOKEN_IDENT,
    TOKEN_BLOCK,

    TOKEN_PP_NUMBER,
    TOKEN_NULL,
    TOKEN_UNKNOWN,
    TOKEN_IDENT_PARAM_START,
  };

  // numbers for parser
  basil::TokenNumber const token_numbers [] =
  {
    { "EOT", TOKEN_EOT },
    { "LPAREN", TOKEN_LPAREN },
    { "RPAREN", TOKEN_RPAREN },
    { "ASSIGN", TOKEN_ASSIGN },
    { "OR", TOKEN_OR },
    { "AND", TOKEN_AND },
    { "EQ", TOKEN_EQ },
    { "NE", TOKEN_NE },
    { "LT", TOKEN_LT },
    { "GT", TOKEN_GT },
    { "LE", TOKEN_LE },
    { "GE", TOKEN_GE },
    { "LSHIFT", TOKEN_LSHIFT },
    { "RSHIFT", TOKEN_RSHIFT },
    { "PLUS", TOKEN_PLUS },
    { "MINUS", TOKEN_MINUS },
    { "TIMES", TOKEN_TIMES },
    { "DIVIDE", TOKEN_DIVIDE },
    { "QMARK", TOKEN_QMARK },
    { "COLON", TOKEN_COLON },
    { "BITOR", TOKEN_BITOR },
    { "XOR", TOKEN_XOR },
    { "BITAND", TOKEN_BITAND },
    { "NOTEQ", TOKEN_NOTEQ },
    { "LTEQ", TOKEN_LTEQ },
    { "GTEQ", TOKEN_GTEQ },
    { "MOD", TOKEN_MOD },
    { "NOT", TOKEN_NOT },
    { "BITNOT", TOKEN_BITNOT },
    { "DBLHASH", TOKEN_DBLHASH },
    { "HASH", TOKEN_HASH },
    { "ELLIPSE", TOKEN_ELLIPSE },
    { "COMMA", TOKEN_COMMA },
    { "DOT", TOKEN_DOT },
    { "PTR", TOKEN_PTR },
    { "INC", TOKEN_INC },
    { "DEC", TOKEN_DEC },
    { "PTR_TIMES", TOKEN_PTR_TIMES },
    { "DOT_TIMES", TOKEN_DOT_TIMES },
    { "DCOLON", TOKEN_DCOLON },
    { "SEMI", TOKEN_SEMI },
    { "LBRACK", TOKEN_LBRACK },
    { "RBRACK", TOKEN_RBRACK },
    { "XOR_ASSIGN", TOKEN_XOR_ASSIGN },
    { "LBRACE", TOKEN_LBRACE },
    { "RBRACE", TOKEN_RBRACE },
    { "PLUS_ASSIGN", TOKEN_PLUS_ASSIGN },
    { "MINUS_ASSIGN", TOKEN_MINUS_ASSIGN },
    { "TIMES_ASSIGN", TOKEN_TIMES_ASSIGN },
    { "DIVIDE_ASSIGN", TOKEN_DIVIDE_ASSIGN },
    { "LSHIFT_ASSIGN", TOKEN_LSHIFT_ASSIGN },
    { "RSHIFT_ASSIGN", TOKEN_RSHIFT_ASSIGN },
    { "BITOR_ASSIGN", TOKEN_BITOR_ASSIGN },
    { "MOD_ASSIGN", TOKEN_MOD_ASSIGN },
    { "BITAND_ASSIGN", TOKEN_BITAND_ASSIGN },
    { "LITERAL_INT", TOKEN_LITERAL_INT },
    { "LITERAL_CHAR", TOKEN_LITERAL_CHAR },
    { "LITERAL_FLOAT", TOKEN_LITERAL_FLOAT },
    { "LITERAL_STRING", TOKEN_LITERAL_STRING },
    { "ZERO", TOKEN_ZERO },
    { "IDENT", TOKEN_IDENT },
    { "BLOCK", TOKEN_BLOCK },
  };
  basil::TokenNumberPtr token_numbers_end = ARRAY_END (token_numbers);
}

#hdr
#include <basil/token_number.h>
#end

#src
#include <util/array_size.h>
#end
