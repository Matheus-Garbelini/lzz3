namespace cpp
{
  class CharReader
  {
  public:
     CharReader(char const *filename)
        : file_reader_(filename), column_(1), peek_beg_(0), peek_end_(0)
     {}
     CharReader(std::string const &str, Loc const &loc)
        : file_reader_(str, loc), column_(loc.get_column()), peek_beg_(0), peek_end_(0)
     {}
     // peek n chars ahead, return true if successful
     bool peekChar(char &c, int n = 0)
     {
        int i = (peek_beg_ + n) % MAX_PEEK;
        if (i == peek_end_)
        {
           if (!readChar(peek_buf_[peek_end_]))
           {
              return false;
           }
           peek_end_ = (peek_end_ + 1) % MAX_PEEK;
        }
        c = peek_buf_[i].c;
        return true;
     }
     // read char, return true if successful
     bool nextChar(char &c, int &cols)
     {
        // check in peek buffer first
        Char ch;
        if (peek_beg_ == peek_end_)
        {
           if (!readChar(ch))
           {
              return false;
           }
        }
        else
        {
           ch = peek_buf_[peek_beg_];
           peek_beg_ = (peek_beg_ + 1) % MAX_PEEK;
        }
        c = ch.c;
        cols = ch.cols;
        return true;
     }
     // pause
     inline void pause()
     {
        file_reader_.pause();
     }
  private:
     struct Char
     {
        char c;
        int cols;
        inline Char() {}
        inline Char(char c, int cols) : c(c), cols(cols) {}
     };

    // read direct char, return true if successful
    bool readChar(Char &ch)
    {
      char c;
      if (!file_reader_.nextChar(c))
      {
        return false;
      }
      int cols = 1;
      // translate trigraphs
      if (c == '?')
      {
        char c1, c2;
        if (file_reader_.peekChar(c1, 0) && c1 == '?' && file_reader_.peekChar(c2, 1))
        {
          const char *p = strchr ("=/'()!<>-" "\0" "#\\^[]|{}~", c2);
          if (p != 0)
          {
            file_reader_.nextChar(c1);
            file_reader_.nextChar(c2);
            c = p[10];
            cols += 2;
          }
        }
      }
      // convert '\r\n' to '\n' for dos end of line
      else if (c == '\r')
      {
        char c1;
        if (file_reader_.peekChar(c1, 0) && c1 == '\n')
        {
          file_reader_.nextChar(c);
          cols = 2;
        }
      }
      // check for tab
      else if (c == '\t')
      {
        int const tab_stop = 8;
        cols = tab_stop - (column_ - 1) % tab_stop;
      }
      if (c == '\n')
      {
        column_ = 1;
      }
      else
      {
        column_ += cols;
      }
      ch = Char(c, cols);
      return true;
    }
  private:
    FileReader file_reader_;
    // current column
    int column_;
    // peek buffer
    enum { MAX_PEEK = 16 };
    Char peek_buf_[MAX_PEEK];
    int peek_beg_;
    int peek_end_;
  }
}

#hdr
#include <cpp_file_reader.h>
#end

#src
#include <stdlib.h>
#include <string.h>
#end
