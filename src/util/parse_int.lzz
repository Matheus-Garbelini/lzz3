// parse_int.lzz
//

// convert string to long int
long int parseInt (std::string const & str)
{
  long int value;
  if (! isInt (str, value))
  {
    if (str.empty ())
    {
      throw Exception ("parseInt: string is empty");
    }
    else
    {
      ostringstream ss;
      ss << "parseInt: invalid integer: " << str;
      throw Exception (ss.str ());
    }
  }
  return value;
}

// convert string to long int
long int parseInt (std::string const & str, bool is_fmt)
{
  return parseInt (is_fmt ? stripCommas (str) : str);
}

// true if int
bool isInt (std::string const & str, long int & value)
{
  bool res (false);
  if (! str.empty ())
  {
    char * endptr (0);
    long int num (strtol (str.c_str (), & endptr, 10));
    if (endptr && * endptr == '\0')
    {
      value = num;
      res = true;
    }
  }
  return res;
}

// true if int
// if is_fmt true then allow for commas
bool isInt (std::string const & str, bool is_fmt, long int & value)
{
  return isInt (is_fmt ? stripCommas (str) : str, value);
}

// true if int
bool isInt (std::string const & str, int & value)
{
  bool res (false);
  long int long_value;
  if (isInt (str, long_value))
  {
    value = (int) long_value;
    res = true;
  }
  return res;
}

// true if int
// if is_fmt true then allow for commas
bool isInt (std::string const & str, bool is_fmt, int & value)
{
  return isInt (is_fmt ? stripCommas (str) : str, value);
}

using namespace std;

#hdr
#include <string>
#end

#src
#include <util/exception.h>
#include <util/strip.h>
#include <cstdlib>
#include <sstream>
#end
