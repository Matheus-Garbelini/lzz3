// parse_yes_no.lzz
//

// if parsed sucessfully return true, otherwise false
// if parsed succesfully, set yn to true if yes, false if no, otherwise yn is not touched
bool parseYesNo (std::string const & str, bool & yn)
{
  bool res (false);
  if (isYes (str))
  {
    res = true;
    yn = true;
  }
  else if (isNo (str))
  {
    res = true;
    yn = false;
  }
  return res;
}

// return true if yes, false if no, otherwise error 
bool parseYesNo (char const * context, std::string const & str)
{
  bool res (false);
  if (isYes (str))
  {
    res = true;
  }
  else if (! isNo (str))
  {
    ThrowException (context) << '\'' << str << "' is not a yes/no string";
  }
  return res;
}

// return true if yes, false if no, otherwise error 
bool parseYesNo (std::string const & str)
{
  return parseYesNo ("parseYesNo", str);
}

// return true if string is affirmative
bool isYes (std::string const & str)
{
  string tmp (downCase (str));
  return tmp == "yes" || tmp == "true" || tmp == "y" || tmp == "t";
}

// return true if string is not yes
bool isNo (std::string const & str)
{
  string tmp (downCase (str));
  return tmp == "no" || tmp == "false" || tmp == "n" || tmp == "f";
}

// bool to string Yes or No
char const * boolToYesNo (bool b)
{
  return b ? "Yes" : "No";
}

using namespace std;

#hdr
#include <string>
#end

#src
#include <util/down_case.h>
#include <util/throw_exception.h>
#end
