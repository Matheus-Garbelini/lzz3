// lua environment

class LuaEnv
{
public:
  LuaEnv (std::string const & scripts_dir)
    : L (luaL_newstate ()), m_scripts_dir (scripts_dir)
  {
    luaL_openlibs (L);
    // set package.path to scripts_dir/?.lua
    lua_getglobal (L, "package");
    lua_pushstring (L, path ("?.lua").c_str ()); 
    lua_setfield (L, -2, "path");
    lua_pop (L, 1);
    // leave error handler on the stack in position 1
    lua_pushcfunction (L, error_handler);
    assert (lua_gettop (L) == 1);
  }

  ~ LuaEnv ()
  {
    close ();
  }

  // close lua state
  void close ()
  {
    if (L)
    {
      lua_close (L);
      L = 0;
    }
  }

  // get filename prefixed with scripts dir
  std::string path (std::string const & filename)
  {
    return file_op::join (m_scripts_dir, filename);
  }

public:
  lua_State * L;

private:
  std::string m_scripts_dir;
}

namespace
{
  int error_handler (lua_State * L)
  {
    char const * msg = luaL_checkstring (L, 1);
    luaL_traceback (L, L, msg, 1);
    return 1;
  }
}

#hdr
#include <string>
#include <lua.hpp>
#end

#src
#include <util/file_op.h>
#include <assert.h>
#end
