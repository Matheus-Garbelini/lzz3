// most

// find most element 
template <class In>
std::pair <In, In> most (In first, In last)
{
  In most_p = first, most_q = most_p, p = most_p, q = most_q;
  unsigned int most_c = 0, c = most_c;
  for (;; ++ first)
  {
    if (first == last || ! (* first == * p))
    {
      if (c > most_c)
      {
        most_p = p;
        most_q = q;
        most_c = c;
      }
      if (first == last)
      {
        break;
      }
      p = first;
      q = p;
      c = 0;
    }
    else
    {
      ++ q;
      ++ c;
    }
  }
  return std::make_pair (most_p, most_q);
}

// find most element with comparison function
template <class In, class Cmp>
std::pair <In, In> most (In first, In last, Cmp cmp)
{
  In most_p = first, most_q = most_p, p = most_p, q = most_q;
  unsigned int most_c = 0, c = most_c;
  for (;; ++ first)
  {
    if (first == last || ! cmp (* first, * p))
    {
      if (c > most_c)
      {
        most_p = p;
        most_q = q;
        most_c = c;
      }
      if (first == last)
      {
        break;
      }
      p = first;
      q = p;
      c = 0;
    }
    else
    {
      ++ q;
      ++ c;
    }
  }
  return std::make_pair (most_p, most_q);
}

#if 0
// find most element 
template <class In>
In most (In first, In last)
{
  In i = first, most_i;
  int c = 1, most_c = 0;
  while (++ first != last)
  {
    if (* i == * first)
    {
      c ++;
    }
    else
    {
      if (c > most_c)
      {
        most_c = c;
        most_i = i;
      }
      i = first;
      c = 1;
    }
  }
  if (c > most_c)
  {
    most_i = i;
  }
  return most_i;
}

// find most element with comparison function
template <class In, class Cmp>
In most (In first, In last, Cmp cmp)
{
  In i = first, most_i;
  int c = 1, most_c = 0;
  while (++ first != last)
  {
    if (cmp (* i, * first))
    {
      c ++;
    }
    else
    {
      if (c > most_c)
      {
        most_c = c;
        most_i = i;
      }
      i = first;
      c = 1;
    }
  }
  if (c > most_c)
  {
    most_i = i;
  }
  return most_i;
}
#endif

#hdr
#include <utility>
#end
